# -*- coding: utf-8 -*-
"""NLP_Project_Fine_Tuning_BERT_for_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4GlHCs6hahuyPulMj84G9VF5lU4MtQb

# Install Transformers Library
"""

!pip install transformers

# importing necessary libraries
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import transformers
from transformers import AutoModel, BertTokenizerFast
import re
# For handling string
import string
# For performing mathematical operations
import math
import spacy
# For visualizations
import matplotlib.pyplot as plt
# Loading model
nlp = spacy.load('en_core_web_sm',disable=['parser', 'ner'])

# Importing wordcloud for plotting word clouds and textwrap for wrapping longer text
from wordcloud import WordCloud
from textwrap import wrap
from spacy.lang.en.stop_words import STOP_WORDS
from string import punctuation
stopwords = list(STOP_WORDS)

from heapq import nlargest
punctuation = punctuation + '\n'

# specify GPU
device = torch.device("cuda")

"""# Load Dataset"""

df = pd.read_csv("Symptom2Disease.csv")
df = df.drop(columns=['Unnamed: 0'])
df.head()

df.shape

# convert labels into int values
df['label_int'] = pd.Categorical(df['label']).codes

# check class distribution
df['label_int'].value_counts(normalize = True)

# check class distribution
df['label'].value_counts(normalize = True)

# getting all codes
codes = df['label_int']

# Get the original labels from the codes
original_labels = df['label'].astype('category').cat.categories

"""### Exploratory data analysis"""

original_text = []
for index, row in df.iterrows():
    original_text.append(row['text'])

df = df.assign(Original_text = original_text)

df.head()

df.info()

df.nunique()

df = df.drop_duplicates()

df.info()

# Dictionary of English Contractions
contractions_dict = { "ain't": "are not","'s":" is","aren't": "are not",
                     "can't": "cannot","can't've": "cannot have",
                     "'cause": "because","could've": "could have","couldn't": "could not",
                     "couldn't've": "could not have", "didn't": "did not","doesn't": "does not",
                     "don't": "do not","hadn't": "had not","hadn't've": "had not have",
                     "hasn't": "has not","haven't": "have not","he'd": "he would",
                     "he'd've": "he would have","he'll": "he will", "he'll've": "he will have",
                     "how'd": "how did","how'd'y": "how do you","how'll": "how will",
                     "I'd": "I would", "I'd've": "I would have","I'll": "I will",
                     "I'll've": "I will have","I'm": "I am","I've": "I have", "isn't": "is not",
                     "it'd": "it would","it'd've": "it would have","it'll": "it will",
                     "it'll've": "it will have", "let's": "let us","ma'am": "madam",
                     "mayn't": "may not","might've": "might have","mightn't": "might not",
                     "mightn't've": "might not have","must've": "must have","mustn't": "must not",
                     "mustn't've": "must not have", "needn't": "need not",
                     "needn't've": "need not have","o'clock": "of the clock","oughtn't": "ought not",
                     "oughtn't've": "ought not have","shan't": "shall not","sha'n't": "shall not",
                     "shan't've": "shall not have","she'd": "she would","she'd've": "she would have",
                     "she'll": "she will", "she'll've": "she will have","should've": "should have",
                     "shouldn't": "should not", "shouldn't've": "should not have","so've": "so have",
                     "that'd": "that would","that'd've": "that would have", "there'd": "there would",
                     "there'd've": "there would have", "they'd": "they would",
                     "they'd've": "they would have","they'll": "they will",
                     "they'll've": "they will have", "they're": "they are","they've": "they have",
                     "to've": "to have","wasn't": "was not","we'd": "we would",
                     "we'd've": "we would have","we'll": "we will","we'll've": "we will have",
                     "we're": "we are","we've": "we have", "weren't": "were not","what'll": "what will",
                     "what'll've": "what will have","what're": "what are", "what've": "what have",
                     "when've": "when have","where'd": "where did", "where've": "where have",
                     "who'll": "who will","who'll've": "who will have","who've": "who have",
                     "why've": "why have","will've": "will have","won't": "will not",
                     "won't've": "will not have", "would've": "would have","wouldn't": "would not",
                     "wouldn't've": "would not have","y'all": "you all", "y'all'd": "you all would",
                     "y'all'd've": "you all would have","y'all're": "you all are",
                     "y'all've": "you all have", "you'd": "you would","you'd've": "you would have",
                     "you'll": "you will","you'll've": "you will have", "you're": "you are",
                     "you've": "you have"}

# Regular expression for finding contractions
contractions_re=re.compile('(%s)' % '|'.join(contractions_dict.keys()))

# Function for expanding contractions
def expand_contractions(text,contractions_dict=contractions_dict):
  def replace(match):
    return contractions_dict[match.group(0)]
  return contractions_re.sub(replace, text)

# Expanding Contractions in the reviews
df['text']=df['text'].apply(lambda x:expand_contractions(x))

# change all text to lower case
df['text']=df['text'].apply(lambda x: x.lower())

# remove punctuations
df['text']=df['text'].apply(lambda x: re.sub('[%s]' % re.escape(string.punctuation), '', x))

# Lemmatization with stopwords removal
df['text']=df['text'].apply(lambda x: ' '.join([token.lemma_ for token in list(nlp(x)) if (token.is_stop==False)]))

df.head()

# Creating Document Term Matrix
df_grouped=df[['label','text']].groupby(by='label').agg(lambda x:' '.join(x))
df_grouped.head()


from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(analyzer='word')
data=cv.fit_transform(df_grouped['text'])
df_dtm = pd.DataFrame(data.toarray(), columns=cv.get_feature_names_out())
df_dtm.index=df_grouped.index
df_dtm.head(10)

# Transposing document term matrix
df_dtm=df_dtm.transpose()
df_dtm.head(5)

# Function for generating word clouds
def generate_wordcloud(data,title):
  wc = WordCloud(width=650, height=400, max_words=150, background_color="white").generate_from_frequencies(data)
  return wc

# Plotting word cloud for each label
fig, axes = plt.subplots(nrows=6, ncols=4, figsize=(30, 25))
for index,label in enumerate(df_dtm.columns):
  ax = fig.add_subplot(6,4, index +1)
  wordcloud = generate_wordcloud(df_dtm[label].sort_values(ascending=False),label)
  ax.imshow(wordcloud, interpolation='bilinear')
  ax.axis('off')
  ax.set_title(label)

df['text'].str.len().hist()

"""# Split train dataset into train, validation and test sets"""

train_text, temp_text, train_labels, temp_labels = train_test_split(df['Original_text'], df['label_int'],
                                                                    random_state=2018,
                                                                    test_size=0.3,
                                                                    stratify=df['label_int'])

# we will use temp_text and temp_labels to create validation and test set
val_text, test_text, val_labels, test_labels = train_test_split(temp_text, temp_labels,
                                                                random_state=2018,
                                                                test_size=0.5,
                                                                stratify=temp_labels)

"""# Import BERT Model and BERT Tokenizer"""

# import BERT-base pretrained model
bert = AutoModel.from_pretrained('bert-base-uncased')

# Load the BERT tokenizer
tokenizer = BertTokenizerFast.from_pretrained('bert-base-uncased')

# sample data
text = ["this is a bert model tutorial", "we will fine-tune a bert model"]

# encode text
sent_id = tokenizer.batch_encode_plus(text, padding=True, return_token_type_ids=False)

# output
print(sent_id)

"""# Tokenization"""

# get length of all the messages in the train set
seq_len = [len(i.split()) for i in train_text]

pd.Series(seq_len).hist(bins = 30)

max_seq_len = 60

# tokenize and encode sequences in the training set
tokens_train = tokenizer.batch_encode_plus(
    train_text.tolist(),
    max_length = max_seq_len,
    pad_to_max_length=True,
    truncation=True,
    return_token_type_ids=False
)

# tokenize and encode sequences in the validation set
tokens_val = tokenizer.batch_encode_plus(
    val_text.tolist(),
    max_length = max_seq_len,
    pad_to_max_length=True,
    truncation=True,
    return_token_type_ids=False
)

# tokenize and encode sequences in the test set
tokens_test = tokenizer.batch_encode_plus(
    test_text.tolist(),
    max_length = max_seq_len,
    pad_to_max_length=True,
    truncation=True,
    return_token_type_ids=False
)

"""# Convert Integer Sequences to Tensors"""

# for train set
train_seq = torch.tensor(tokens_train['input_ids'])
train_mask = torch.tensor(tokens_train['attention_mask'])
train_y = torch.tensor(train_labels.tolist())

# for validation set
val_seq = torch.tensor(tokens_val['input_ids'])
val_mask = torch.tensor(tokens_val['attention_mask'])
val_y = torch.tensor(val_labels.tolist())

# for test set
test_seq = torch.tensor(tokens_test['input_ids'])
test_mask = torch.tensor(tokens_test['attention_mask'])
test_y = torch.tensor(test_labels.tolist())

"""# Create DataLoaders"""

from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler

#define a batch size
batch_size = 20

# wrap tensors
train_data = TensorDataset(train_seq, train_mask, train_y)

# sampler for sampling the data during training
train_sampler = RandomSampler(train_data)

# dataLoader for train set
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

# wrap tensors
val_data = TensorDataset(val_seq, val_mask, val_y)

# sampler for sampling the data during training
val_sampler = SequentialSampler(val_data)

# dataLoader for validation set
val_dataloader = DataLoader(val_data, sampler = val_sampler, batch_size=batch_size)

"""# Freeze BERT Parameters"""

# freeze all the parameters
for param in bert.parameters():
    param.requires_grad = False

"""# Define Model Architecture"""

class BERT_Arch(nn.Module):

    def __init__(self, bert):

      super(BERT_Arch, self).__init__()

      self.bert = bert

      # dropout layer
      self.dropout = nn.Dropout(0.1)

      # relu activation function
      self.relu =  nn.ReLU()

      # dense layer 1
      self.fc1 = nn.Linear(768,2056)

      # dense layer 2
      #self.fc3 = nn.Linear(512,256)

      # dense layer 2 (Output layer)
      self.fc2 = nn.Linear(2056,24)

      #softmax activation function
      self.softmax = nn.LogSoftmax(dim=1)

    #define the forward pass
    def forward(self, sent_id, mask):

      #pass the inputs to the model
      _, cls_hs = self.bert(sent_id, attention_mask=mask, return_dict=False)

      x = self.fc1(cls_hs)

      #x = self.fc3(x)

      x = self.relu(x)

      x = self.dropout(x)

      # output layer
      x = self.fc2(x)

      # apply softmax activation
      x = self.softmax(x)

      return x

# pass the pre-trained BERT to our define architecture
model = BERT_Arch(bert)

# push the model to GPU
#model = model.to(device)

# optimizer from hugging face transformers
from transformers import AdamW

# define the optimizer
optimizer = AdamW(model.parameters(), lr = 1e-3)  #  lr = 1e-3

"""# Find Class Weights"""

from sklearn.utils.class_weight import compute_class_weight

#compute the class weights
class_wts = compute_class_weight(class_weight = 'balanced', classes  = np.unique(train_labels), y = train_labels)

print(class_wts)

# convert class weights to tensor
weights= torch.tensor(class_wts,dtype=torch.float)
#weights = weights.to(device)

# loss function
cross_entropy  = nn.NLLLoss(weight=weights)

# number of training epochs
epochs = 10

"""# Fine-Tune BERT"""

# function to train the model
def train():

  model.train()

  total_loss, total_accuracy = 0, 0

  # empty list to save model predictions
  total_preds=[]

  # iterate over batches
  for step,batch in enumerate(train_dataloader):

    # progress update after every 50 batches.
    if step % 50 == 0 and not step == 0:
      print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(train_dataloader)))

    # push the batch to gpu
    #batch = [r.to(device) for r in batch]

    sent_id, mask, labels = batch

    # clear previously calculated gradients
    model.zero_grad()

    # get model predictions for the current batch
    preds = model(sent_id, mask)

    # compute the loss between actual and predicted values
    loss = cross_entropy(preds, labels)

    # add on to the total loss
    total_loss = total_loss + loss.item()

    # backward pass to calculate the gradients
    loss.backward()

    # clip the the gradients to 1.0. It helps in preventing the exploding gradient problem
    torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

    # update parameters
    optimizer.step()

    # model predictions are stored on GPU. So, push it to CPU
    preds=preds.detach().cpu().numpy()

    # append the model predictions
    total_preds.append(preds)

  # compute the training loss of the epoch
  avg_loss = total_loss / len(train_dataloader)

  # predictions are in the form of (no. of batches, size of batch, no. of classes).
  # reshape the predictions in form of (number of samples, no. of classes)
  total_preds  = np.concatenate(total_preds, axis=0)

  #returns the loss and predictions
  return avg_loss, total_preds

# function for evaluating the model
def evaluate():

  print("\nEvaluating...")

  # deactivate dropout layers
  model.eval()

  total_loss, total_accuracy = 0, 0

  # empty list to save the model predictions
  total_preds = []

  # iterate over batches
  for step,batch in enumerate(val_dataloader):

    # Progress update every 50 batches.
    if step % 50 == 0 and not step == 0:

      # Calculate elapsed time in minutes.
      elapsed = format_time(time.time() - t0)

      # Report progress.
      print('  Batch {:>5,}  of  {:>5,}.'.format(step, len(val_dataloader)))

    # push the batch to gpu
    #batch = [t.to(device) for t in batch]

    sent_id, mask, labels = batch

    # deactivate autograd
    with torch.no_grad():

      # model predictions
      preds = model(sent_id, mask)

      # compute the validation loss between actual and predicted values
      loss = cross_entropy(preds,labels)

      total_loss = total_loss + loss.item()

      preds = preds.detach().cpu().numpy()

      total_preds.append(preds)

  # compute the validation loss of the epoch
  avg_loss = total_loss / len(val_dataloader)

  # reshape the predictions in form of (number of samples, no. of classes)
  total_preds  = np.concatenate(total_preds, axis=0)

  return avg_loss, total_preds

#load weights of best model
#path = 'saved_weights.pt'
#model.load_state_dict(torch.load(path))

"""# Start Model Training"""

# set initial loss to infinite
best_valid_loss = float('inf')

epochs = 50

# empty lists to store training and validation loss of each epoch
train_losses=[]
valid_losses=[]

#for each epoch
for epoch in range(epochs):

    print('\n Epoch {:} / {:}'.format(epoch + 1, epochs))

    #train model
    train_loss, _ = train()

    #evaluate model
    valid_loss, _ = evaluate()

    #save the best model
    if valid_loss < best_valid_loss:
        best_valid_loss = valid_loss
        torch.save(model.state_dict(), 'saved_weights.pt')

    # append training and validation loss
    train_losses.append(train_loss)
    valid_losses.append(valid_loss)

    print(f'\nTraining Loss: {train_loss:.3f}')
    print(f'Validation Loss: {valid_loss:.3f}')

import matplotlib.pyplot as plt
import seaborn as sns

# Training and validation loss Over Epochs
def plot_train_valid_loss(training_loss, validation_loss, c = 'b', c2 = 'g'):
    epochs = range(1, len(training_loss) + 1)

    plt.figure(figsize=(15, 8))
    plt.plot(epochs, training_loss, marker='o', linestyle='-', color =  c, label = 'Training loss')
    plt.plot(epochs, validation_loss, marker='o', linestyle='-', color =  c2, label = 'Validation loss')
    plt.title('Training and validation loss over epochs\n', fontweight='bold')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend(loc="upper right")
    plt.grid(True)
    plt.show()
plot_train_valid_loss(train_losses, valid_losses)
print("\n\n")

"""# Load Saved Model"""

#load weights of best model
path = 'saved_weights.pt'
model.load_state_dict(torch.load(path))

"""# Get Predictions for Test Data"""

# get predictions for test data
with torch.no_grad():
  # preds = model(test_seq.to(device), test_mask.to(device))
  preds = model(test_seq, test_mask)
  preds = preds.detach().cpu().numpy()

# model's performance
preds = np.argmax(preds, axis = 1)
print(classification_report(test_y, preds))

# Commented out IPython magic to ensure Python compatibility.
from sklearn.metrics import confusion_matrix
import seaborn as sns
# %matplotlib inline

cm = confusion_matrix(test_y, preds)

plt.subplots(figsize=(12,12))
ax = plt.subplot()
sns.heatmap(cm, annot=True, ax=ax)  #annot=True to annotate cells, ftm='g' to disable scientific notation

# labels, title and ticks
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')

# testing data using the csv data (original data) without any preprocessing
# rows randomly selected

sent1 = 'My fingers and soles have pretty thick skin that is cracked severely. These fractures hurt and bleed frequently. The fractures are itchy and covered with scales.' # Psoriasis
sent2 = 'I am feeling really sick. I have a high fever and headache. I noticed rashes on my arms and face. I am extremely worried about this. Today, I observed red sores near my nose.' # Impetigo
sent3 = 'I have a rash on my legs that is causing a lot of discomforts. It seems there is a cramp and I can see prominent veins on the calf. Also, I have been feeling very tired and fatigued in the past couple of days.' # Varicose Veins
text = [sent1, sent2, sent3]

sent_ids = tokenizer.batch_encode_plus(text, padding=True, return_token_type_ids=False)

text_seq = torch.tensor(sent_ids['input_ids'])
text_mask = torch.tensor(sent_ids['attention_mask'])


# get predictions for test data
with torch.no_grad():
  preds = model(text_seq, text_mask)
  preds = preds.detach().cpu().numpy()

preds = np.argmax(preds, axis = 1)
print(preds)

print(original_labels[preds])

# for checking the sentence labels
df.loc[df['Original_text'] == sent2]

# getting prediction on random text
# modification has been done on the original text and getting the prediction after modification
sent1 = 'These fractures hurt and bleed frequently. The fractures are itchy and covered with scales. My fingers and soles have pretty thick skin that is cracked severely' # Psoriasis
sent2 = 'I am feeling sick. I have a fever and headache. I noticed rashes on my arms and face. I am worried about this. I observed red sores near my nose.' # Impetigo
sent3 = 'I have a rash on my legs that is causing discomforts. There is a cramp and I can see prominent veins on the calf. I have been feeling very tired and fatigued in the past couple of days.' # Varicose Veins

text = [sent1, sent2, sent3]


# Expanding Contractions in the reviews
text = list(map(lambda x: expand_contractions(x), text))

# change all text to lower case
text = list(map(lambda x: x.lower(), text))

# remove punctuations
text = list(map(lambda x: re.sub('[%s]' % re.escape(string.punctuation), '', x), text))

# Lemmatization with stopwords removal
text = list(map(lambda x: ' '.join([token.lemma_ for token in list(nlp(x)) if (token.is_stop==False)]), text))

sent_ids = tokenizer.batch_encode_plus(text, padding=True, return_token_type_ids=False)

text_seq = torch.tensor(sent_ids['input_ids'])
text_mask = torch.tensor(sent_ids['attention_mask'])


# get predictions for test data
with torch.no_grad():
  preds = model(text_seq, text_mask)
  preds = preds.detach().cpu().numpy()

preds = np.argmax(preds, axis = 1)
print(preds)

print(original_labels[preds])

"""## Get prediction after getting summary data"""

df.head()

"""##**Summarization using Spacy**:"""

nlp = spacy.load('en_core_web_sm')

def get_summary_spacy(text):
    # Word Tokenization
    doc = nlp(text)

    word_frequencies = {}
    for word in doc:
      if word.text.lower() not in stopwords:
        if word.text.lower() not in punctuation:
          if word.text not in word_frequencies.keys():
            word_frequencies[word.text] = 1
          else:
            word_frequencies[word.text] += 1

    max_frequency = max(word_frequencies.values())


    for word in word_frequencies.keys():
      word_frequencies[word] = word_frequencies[word]/max_frequency


    # Sentence tokenization:
    sentence_tokens = [sent for sent in doc.sents]

    # Word frequency table:
    sentence_scores = {}
    for sent in sentence_tokens:
      for word in sent:
        if word.text.lower() in word_frequencies.keys():
          if sent not in sentence_scores.keys():
            sentence_scores[sent] = word_frequencies[word.text.lower()]
          else:
            sentence_scores[sent] += word_frequencies[word.text.lower()]

    # summarization
    select_length = int(len(sentence_tokens)*0.3)
    select_length

    summary = nlargest(select_length, sentence_scores, key = sentence_scores.get)

    final_summary = [word.text for word in summary]
    summary = ' '.join(final_summary)

    return summary

# create a new dataframe and merge 5 symptoms rows into 1 row, so that we can generate summary
newDf = pd.DataFrame()
mergeRows = 5
currentRow = 0

data = []

columns = ['label', 'label_int', 'text', 'Original_text', 'summary_original']

# getting summary from original text
while True:
  parent_label =  df.iloc[currentRow]['label']
  label_int = df.iloc[currentRow]['label_int']
  text = ''
  Original_text = ''
  for row in range(currentRow, len(df)):
      child_label = df.iloc[currentRow]['label']
      if parent_label == child_label:
        df_row = df.iloc[currentRow]

        # append text and add into new dataframe
        text = text + df_row['text']
        Original_text = Original_text + df_row['Original_text']

        currentRow = currentRow +1
        if currentRow % mergeRows == 0:
          break;

  # get_summary
  summary_original = get_summary_spacy(Original_text)

  # save into new dataframe
  data.append([parent_label, label_int, text, Original_text, summary_original])

  if currentRow >= len(df):
    break

newDf = pd.DataFrame(data, columns=columns)

newDf.head()

newDf.to_csv('summary.csv')

# actual values
print ("Actual values")
print (f"{newDf.iloc[1]['label']}, {newDf.iloc[10]['label']}, {newDf.iloc[75]['label']}, {newDf.iloc[11]['label']}, {newDf.iloc[49]['label']}, {newDf.iloc[105]['label']}")

# Predicted values
print ("Predicted values")
text = [newDf.iloc[1]['summary_original'], newDf.iloc[10]['summary_original'], newDf.iloc[75]['summary_original'], newDf.iloc[11]['summary_original'], newDf.iloc[49]['summary_original'], newDf.iloc[105]['summary_original']]

sent_ids = tokenizer.batch_encode_plus(text, padding=True, return_token_type_ids=False)

text_seq = torch.tensor(sent_ids['input_ids'])
text_mask = torch.tensor(sent_ids['attention_mask'])


# get predictions for test data
with torch.no_grad():
  preds = model(text_seq, text_mask)
  preds = preds.detach().cpu().numpy()

preds = np.argmax(preds, axis = 1)
print(preds)

print(original_labels[preds])

"""### Getting predictions on every summarization and plot a heat map for final visualization"""

sent_ids = tokenizer.batch_encode_plus(newDf['summary_original'].tolist(), padding=True, return_token_type_ids=False)

text_seq = torch.tensor(sent_ids['input_ids'])
text_mask = torch.tensor(sent_ids['attention_mask'])


# get predictions for test data
with torch.no_grad():
  preds = model(text_seq, text_mask)
  preds = preds.detach().cpu().numpy()

preds = np.argmax(preds, axis = 1)
#print(preds)
#print(original_labels[preds])

test_y = torch.tensor(newDf['label_int'].tolist())

cm = confusion_matrix(test_y, preds)

plt.subplots(figsize=(12,12))
ax = plt.subplot()
sns.heatmap(cm, annot=True, ax=ax)  #annot=True to annotate cells

# labels, title and ticks
ax.set_xlabel('Predicted labels')
ax.set_ylabel('True labels')
ax.set_title('Confusion Matrix')